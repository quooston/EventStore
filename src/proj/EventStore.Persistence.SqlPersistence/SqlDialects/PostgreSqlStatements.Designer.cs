//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventStore.Persistence.SqlPersistence.SqlDialects {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class PostgreSqlStatements {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal PostgreSqlStatements() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EventStore.Persistence.SqlPersistence.SqlDialects.PostgreSqlStatements", typeof(PostgreSqlStatements).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT
        ///  INTO Snapshots
        ///     ( StreamId, StreamRevision, Payload )
        ///SELECT :StreamId, :StreamRevision, :Payload
        ////*FROM DUAL*/
        /// WHERE EXISTS
        ///     ( SELECT *
        ///         FROM Commits
        ///        WHERE StreamId = :StreamId
        ///          AND (StreamRevision - Items) &lt;= :StreamRevision )
        ///   AND NOT EXISTS
        ///     ( SELECT *
        ///         FROM Snapshots
        ///        WHERE StreamId = :StreamId
        ///          AND StreamRevision = :StreamRevision );.
        /// </summary>
        internal static string AppendSnapshotToCommit {
            get {
                return ResourceManager.GetString("AppendSnapshotToCommit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT COUNT(*)
        ///  FROM Commits
        /// WHERE StreamId = :StreamId
        ///   AND CommitSequence = :CommitSequence
        ///   AND CommitId = :CommitId;.
        /// </summary>
        internal static string DuplicateCommit {
            get {
                return ResourceManager.GetString("DuplicateCommit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
        ///  FROM Commits
        /// WHERE CommitStamp &gt;= :CommitStamp
        /// ORDER BY CommitStamp, StreamId, StreamRevision
        /// LIMIT :Limit OFFSET :Skip;.
        /// </summary>
        internal static string GetCommitsFromInstant {
            get {
                return ResourceManager.GetString("GetCommitsFromInstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
        ///  FROM Commits
        /// WHERE StreamId = :StreamId
        ///   AND StreamRevision &gt;= :StreamRevision
        ///   AND (StreamRevision - Items) &lt;= :MaxStreamRevision
        ///   AND CommitSequence &gt; :CommitSequence
        /// ORDER BY CommitSequence
        /// LIMIT :Limit;.
        /// </summary>
        internal static string GetCommitsFromStartingRevision {
            get {
                return ResourceManager.GetString("GetCommitsFromStartingRevision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
        ///  FROM Commits
        /// WHERE CommitStamp &gt;= :CommitStampStart
        ///   AND CommitStamp &lt; :CommitStampEnd
        /// ORDER BY CommitStamp, StreamId, StreamRevision
        /// LIMIT :Limit OFFSET :Skip;.
        /// </summary>
        internal static string GetCommitsFromToInstant {
            get {
                return ResourceManager.GetString("GetCommitsFromToInstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT *
        ///  FROM Snapshots
        /// WHERE StreamId = :StreamId
        ///   AND StreamRevision &lt;= :StreamRevision
        /// ORDER BY StreamRevision DESC
        /// LIMIT 1;.
        /// </summary>
        internal static string GetSnapshot {
            get {
                return ResourceManager.GetString("GetSnapshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT C.StreamId, MAX(C.StreamRevision) AS StreamRevision, MAX(COALESCE(S.StreamRevision, 0)) AS SnapshotRevision
        ///  FROM Commits AS C
        /// LEFT OUTER JOIN Snapshots AS S
        ///    ON C.StreamId = S.StreamId
        ///   AND C.StreamRevision &gt;= S.StreamRevision
        /// WHERE C.StreamId &gt; :StreamId
        /// GROUP BY C.StreamId
        ///HAVING MAX(C.StreamRevision) &gt;= MAX(COALESCE(S.StreamRevision, 0)) + :Threshold
        /// ORDER BY C.StreamId
        /// LIMIT :Limit;.
        /// </summary>
        internal static string GetStreamsRequiringSnapshots {
            get {
                return ResourceManager.GetString("GetStreamsRequiringSnapshots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
        ///  FROM Commits
        /// WHERE Dispatched = 0
        /// ORDER BY CommitStamp
        /// LIMIT :Limit OFFSET :Skip;.
        /// </summary>
        internal static string GetUndispatchedCommits {
            get {
                return ResourceManager.GetString("GetUndispatchedCommits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to do $$
        ///begin
        ///
        /// CREATE TABLE Commits
        ///(
        ///       StreamId uuid NOT NULL,
        ///       StreamRevision int NOT NULL CHECK (StreamRevision &gt; 0),
        ///       Items smallint NOT NULL CHECK (Items &gt; 0),
        ///       CommitId uuid NOT NULL,
        ///       CommitSequence int NOT NULL CHECK (CommitSequence &gt; 0),
        ///       CommitStamp timestamp NOT NULL,
        ///       Dispatched boolean NOT NULL DEFAULT false,
        ///       Headers bytea NULL,
        ///       Payload bytea NOT NULL,
        ///       CONSTRAINT PK_Commits PRIMARY KEY (StreamId, CommitSequence)
        ///);
        ///CRE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InitializeStorage {
            get {
                return ResourceManager.GetString("InitializeStorage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPDATE Commits
        ///   SET Dispatched = 1
        /// WHERE StreamId = :StreamId
        ///   AND CommitSequence = :CommitSequence;.
        /// </summary>
        internal static string MarkCommitAsDispatched {
            get {
                return ResourceManager.GetString("MarkCommitAsDispatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT
        ///  INTO Commits
        ///     ( StreamId, CommitId, CommitSequence, StreamRevision, Items, CommitStamp, Headers, Payload )
        ///VALUES (:StreamId, :CommitId, :CommitSequence, :StreamRevision, :Items, :CommitStamp, :Headers, :Payload);.
        /// </summary>
        internal static string PersistCommit {
            get {
                return ResourceManager.GetString("PersistCommit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DELETE FROM Snapshots;
        ///DELETE FROM Commits;.
        /// </summary>
        internal static string PurgeStorage {
            get {
                return ResourceManager.GetString("PurgeStorage", resourceCulture);
            }
        }
    }
}
